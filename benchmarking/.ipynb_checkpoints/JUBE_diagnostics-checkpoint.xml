<?xml version="1.0" encoding="UTF-8"?>
<jube version="2.2.2">
  <benchmark name="diagnostics" outpath="diagnostics_benchmark">
    <comment>combining JUBE2, SBatch and HeAT (mpi4py)</comment>
    <parameterset name="job_config">
      <!-- SLURM parameters  -->
      <parameter  name="nodes" type="int">1,2,4,8</parameter>
      <parameter  name="num_procs_per_node" mode="python" type="int">&quot;,&quot;.join(str(a) for a in [1,2])</parameter>
      <parameter  name="omp_num_threads" mode="python" type="int">&quot;,&quot;.join(str(a) for a in [1,2,4,12,24,32,48] if a == 48//$num_procs_per_node)</parameter>
      <parameter  name="job_file"  type="string">jobscript.ll</parameter>
      <parameter  name="walltime"  type="string">00:12:00</parameter>
      <parameter  name="account"  type="string">slts</parameter>
      <parameter  name="partition"  type="string">batch</parameter>
      <parameter  name="err_file"  type="string">stderr</parameter>
      <parameter  name="out_file"  type="string">stdout</parameter>
      <parameter  name="ready_file"  type="string">ready</parameter>
      <parameter  name="exec"  type="string">OMP_NUM_THREADS=$omp_num_threads srun -c $omp_num_threads python $python_file</parameter>
      <parameter  name="submit_cmd"  type="string">sbatch</parameter>
      <parameter  name="python_file"  type="string">benchmark.py</parameter>
      <!-- additional SLURM parameters -->
    </parameterset>

    <parameterset name="source_config">
      <!-- Source code parameters -->
      <parameter name="split" separator="," type="int">0,-1</parameter>
      <!-- additional source code parameters -->
    </parameterset>

    <substituteset name="sub_job">
      <!-- generates SBatch File using job_config parameters -->
      <iofile in="${job_file}.in" out="$job_file" out_mode="w"/>
      <sub source="#NODES#">$nodes</sub>
      <sub source="#NUM_PROCS_PER_NODE#">$num_procs_per_node</sub>
      <sub source="#WALLTIME#">$walltime</sub>
      <sub source="#ERR_FILEPATH#">$err_file</sub>
      <sub source="#OUT_FILEPATH#">$out_file</sub>
      <sub source="#EXEC#">$exec</sub>
      <sub source="#READY#">$ready_file</sub>
      <sub source="#ACCOUNT#">$account</sub>
      <sub source="#PARTITION#">$partition</sub>
      <!-- additional SLURM parameters -->
    </substituteset>

    <substituteset name="sub_source">
      <!-- fills in source File with source_config parameters and timings -->
      <iofile in="$python_file" out="$python_file" out_mode="w"/>
      <!--sub source="#SIZE#">$problemsize</sub-->
      <sub source="#SPLIT#">$split</sub>
      <!-- additional source code parameters -->

      <sub source="#TIME_INIT#">import heat; __jube_wtime = heat.MPI.Wtime; __jube_out="" #for jube time measurements\n</sub>
      <sub source="#TIME_BEGIN#">heat.MPI_WORLD.Barrier(); __jube_time_begin = __jube_wtime() #for jube time measurements\n</sub>
      <sub source="#TIME_END#">__jube_time = __jube_wtime() - __jube_time_begin; heat.MPI_WORLD.Barrier(); __jube_out += str(heat.MPI.COMM_WORLD.reduce(__jube_time, heat.MPI.MAX))+';' #for jube time measurements\n</sub>
      <sub source="#TIME_FINAL#">print("jube;"+__jube_out[:-1]) if heat.MPI_WORLD.rank == 0 else None #for jube time measurements\n #for jube time measurements\n</sub>
    </substituteset>

    <fileset name="sbatch_file">
      <copy>${job_file}.in</copy>
    </fileset>
    <fileset name="source_files_copy">
	    <copy>$python_file</copy>
	    <link>/p/home/jusers/bourgart1/juwels/cesmtst_bourgart1/pf_diagnostics_git/Diagnostics.py</link>
	    <link>/p/home/jusers/bourgart1/juwels/cesmtst_bourgart1/pf_diagnostics_git/IO.py</link>
    </fileset>

    <patternset name="pattern_set">
      <!-- collects information -->
      <pattern mode="pattern" name="extract_time" type="string">(jube(;[+-]?\d*\.?\d+(?:[eE][-+]?\d+)?)*)</pattern>
        <!--
          regex, matches line that starts with "jube;" followed by any number of "FLOAT;", e.g. "jube;0.1;0.2".
          This line is generated by #TIME_FINAL#.
          "jube;" identifies the line as the one containing the time measurements.
          The numbers are the measured runtimes.
        -->
      <pattern mode="python" name="read_pfb" default="nan" unit="sec" type="string">"$extract_time".split(';')[1]</pattern>
      <pattern mode="python" name="SubsurfaceStorage" default="nan" unit="sec" type="string">"$extract_time".split(';')[2]</pattern>
      <pattern mode="python" name="SubsurfaceStorage_vectorized" default="nan" unit="sec" type="string">"$extract_time".split(';')[3]</pattern>
      <pattern mode="python" name="TopLayerPressure" default="nan" unit="sec" type="string">"$extract_time".split(';')[4]</pattern>
      <pattern mode="python" name="TopLayerPressure_vectorized" default="nan" unit="sec" type="string">"$extract_time".split(';')[5]</pattern>
      <pattern mode="python" name="SurfaceStorage" default="nan" unit="sec" type="string">"$extract_time".split(';')[6]</pattern>
      <pattern mode="python" name="VolumetricMoisture" default="nan" unit="sec" type="string">"$extract_time".split(';')[7]</pattern>
      <pattern mode="python" name="OverlandFlow" default="nan" unit="sec" type="string">"$extract_time".split(';')[8]</pattern>
      <pattern mode="python" name="NetLateralOverlandFlow" default="nan" unit="sec" type="string">"$extract_time".split(';')[9]</pattern>
      <pattern mode="python" name="NetLateralOverlandFlow_vectorized" default="nan" unit="sec" type="string">"$extract_time".split(';')[10]</pattern>
      <pattern mode="python" name="SubsurfaceFlow" default="nan" unit="sec" type="string">"$extract_time".split(';')[11]</pattern>
      <pattern mode="python" name="SubsurfaceFlow_vectorized" default="nan" unit="sec" type="string">"$extract_time".split(';')[12]</pattern>
<!-- additional time measurements:
            "$extract_time".split(';')[n] for the n-th time measurement
        -->
      <pattern mode="python" name="mpi_num_procs" type="int">$num_procs_per_node * $nodes</pattern>
      <pattern mode="python" name="total_cores" type="int">$mpi_num_procs * $omp_num_threads</pattern>
    </patternset>

    <step name="submit">
      <use>job_config</use>
      <use>source_config</use>
      <use>source_files_copy,sub_source</use>
      <use>sbatch_file,sub_job</use>
      <do>$submit_cmd $job_file</do>
    </step>

    <analyser name="analyse" reduce="True">
      <use>pattern_set</use>
      <analyse step="submit">
        <file>stdout</file>
      </analyse>
    </analyser>

    <result>
      <use>analyse</use>
      <table name="result" separator=";" style="csv" transpose="False">
        <!-- job config -->
        <column>nodes</column>
        <column>total_cores</column>
        <column>mpi_num_procs</column>
        <column>omp_num_threads</column>
        <!-- source config -->
        <column>split</column>
        <!--column>problemsize</column-->
        <!-- results -->
        <column>read_pfb</column>
        <column>SubsurfaceStorage</column>
        <column>SubsurfaceStorage_vectorized</column>
	<column>TopLayerPressure</column>
        <column>TopLayerPressure_vectorized</column>
        <column>SurfaceStorage</column>
        <column>VolumetricMoisture</column>
        <column>OverlandFlow</column>
        <column>NetLateralOverlandFlow</column>
        <column>NetLateralOverlandFlow_vectorized</column>
        <column>SubsurfaceFlow</column>
        <column>SubsurfaceFlow_vectorized</column>
        <!-- additional time measurements -->
      </table>
    </result>
  </benchmark>
</jube>
